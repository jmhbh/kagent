import random

from google.adk import Agent
from google.adk.tools.tool_context import ToolContext
from google.adk.models.lite_llm import LiteLlm


def roll_die(sides: int, tool_context: ToolContext) -> int:
    """Roll a die and return the rolled result.
    Args:
      sides: The integer number of sides the die has.
    Returns:
      An integer of the result of rolling the die.
    """
    result = random.randint(1, sides)
    if "rolls" not in tool_context.state:
        tool_context.state["rolls"] = []

    tool_context.state["rolls"] = tool_context.state["rolls"] + [result]
    return result


async def check_prime(nums: list[int]) -> str:
    """Check if a given list of numbers are prime.
    Args:
      nums: The list of numbers to check.
    Returns:
      A str indicating which number is prime.
    """
    primes = set()
    for number in nums:
        number = int(number)
        if number <= 1:
            continue
        is_prime = True
        for i in range(2, int(number**0.5) + 1):
            if number % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.add(number)
    return "No prime numbers found." if not primes else f"{', '.join(str(num) for num in primes)} are prime numbers."


# Create the appropriate model based on provider
def create_model(provider: str, model_name: str):
    """Create the appropriate model wrapper based on the provider."""
    # Provider mapping for LiteLLM model prefixes
    provider_mapping = {
        "openai": "openai",
        "anthropic": "anthropic",
        "azureopenai": "azure"
    }

    # Handle special cases first
    if provider.lower() == "gemini":
        # For Gemini, use the model name directly
        return model_name
    elif provider.lower() in provider_mapping:
        # Use LiteLLM with the appropriate prefix
        prefix = provider_mapping[provider.lower()]
        return LiteLlm(model=f"{prefix}/{model_name}")
    else:
        # For unknown providers, try using the model name directly
        return model_name


root_agent = Agent(
    model=create_model("{{.ModelProvider}}", "{{.ModelName}}"),
    name="{{.Name}}_agent",
    description=("{{.Name}} agent."),
    instruction="""
{{.Instruction}}
    """,
    tools=[
        roll_die,
        check_prime,
    ],
)